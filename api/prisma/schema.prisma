// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  username String    @unique
  password String
  role     Role      @default(USER)
  articles Article[] @relation("userArticles")
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  author    User     @relation("userArticles", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  authorId  Int
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  players   Player[]
  wins      Int      @default(0)
  loses     Int      @default(0)
  homeGames Game[]   @relation("teamOne")
  awayGames Game[]   @relation("teamTwo")
}

model Player {
  id        Int        @id @default(autoincrement())
  firstname String
  lastname  String
  position  Position
  number    Int
  team      Team?      @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId    Int?
  incidents Incident[]
  status    Status
}

model Game {
  id         Int      @id @default(autoincrement())
  teamOne    Team     @relation("teamOne", fields: [homeTeamId], references: [id])
  homeTeamId Int
  teamTwo    Team     @relation("teamTwo", fields: [awayTeamId], references: [id])
  awayTeamId Int
  homeScore  Int
  awayScore  Int
  date       DateTime @default(now())
}

model Incident {
  id      Int      @id @default(autoincrement())
  type    String
  players Player[]
}

enum Role {
  USER
  ADMIN
}

enum Position {
  GK
  DEF
  MF
  FW
}

enum Status {
  Suspendu
  Blessé
  Opérationnel
  Inconnu
}
